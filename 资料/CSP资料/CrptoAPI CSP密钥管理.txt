 

CryptoAPI CSP 密钥管理

在CryptoAPI中，CSP负责密钥管理工作，包括密钥存储、密钥创建、密钥销毁等，并负责使用密钥来完成各种加解密操作，于是应用程序若涉及密钥或加密相关服务，则必须先获取某一具体CSP，即在应用程序第一步必须通过调用CryptAcquireContext来获取CSP句柄。在调用CryptAcquireContext获取CSP的同时也会自动给每个用户创建一个密钥容器，容器名称通过参数指定。每个CSP有一个密钥库，密钥库用于存储密钥，每个密钥库包括一个或多个密钥容器（Key Containers )，每个密钥容器存储属于某个特定用户的所有密钥和数字证书，包括公/私密钥对和会话密钥。参照：http://www.whcst.com/ecartoon/news/2012-02-06/362.shtml

         密钥一般分为两种类型：会话密钥，公/私角密钥对。会话密钥一般用于加解密某次会话的数据，会话完成后一般会被自动销毁。在CryptoAPI中，会话密钥一般使用CryptGenKey或CryptDeriveKey函数创建，CryptGenKey通过随机数创建密钥，每次调用CryptGenKey会产生不同的密钥，这种方式创建的密钥若在之后的某个时间需要用到，则必须以某种方式保存密钥；CryptDeriveKey通过数据基来创建密钥，相同的数据基，CSP及加密算法创建的密钥是一样的，在这种方式中，无需保存密钥，记下创建密钥里的数据基，CSP和加密算法则可以重新创建此密钥。公/私密钥对，大多数CSP产生的密钥容器包含两对，一对用于产生数字签名，称为签名公/私密钥对。在调用CryptAcquireContext后，可以调用CryptGenKey来创建公/私密钥对。

        公/私密钥对和会话密钥都保存在CSP的对应密钥容器中，CSP负责管理它们。在CryptoAPI中，公/私密钥对在创建后永久保存在CSP当前密钥容器（如硬件智能卡、USBKey中）中，只有销毁其对应密钥容器才会销毁公/私密钥对；会话密钥在完成会话后会被自动销毁。当会话密钥在完成会话之后的某个时间需要时该怎么办呢？对于通过CryptDeriveKey函数创建的密钥，记下创建密钥时的数据基，CSP和加密算法则可以重新创建此密钥，但对于通过CryptGenKey函数创建的密钥则必须以某种方法把会话密钥保存下来。同样的，对于公/私密钥对，它们虽然永远保存在CSP中，但由于在CryptoAPI中不同的CSP间无法相互通信，即在某CSP需要用到另一个CSP的公/私密钥对，必须有某种方法把它们传输过来。对于这些问题，CryptoAPI通过密钥对导出导入操作来完成。用户通过CryptExportKey函数可以把密钥从CSP导出到密钥块，以备以后使用或传输给其他用户，当再次需要此密钥时，再通过CryptImportKey函数把密钥块导入到具体的CSP中。


 