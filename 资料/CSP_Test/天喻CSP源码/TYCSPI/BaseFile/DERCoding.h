#ifndef __DERCODING_H__
#define __DERCODING_H__


typedef CArrayTemplate<BYTE, BYTE> byteArray;
//////////////////////////////////////////////////////////////////////////
/*
功能：	按照DER的编码规则，形成TLV结构
输入：	ulTag――Tag值
		ulLen――Len值
		Value――vlue值
输出：	Vlaue――完成编码后的TLV结构
*/
///////////////////////////////////////////////////////////////////////////
void TLVEncoding(
	ULONG ulTag,
	ULONG ulLen,
	byteArray& Value
	);
//////////////////////////////////////////////////////////////////////////
/*
功能：	按照DER的解码码规则，得出tag
输入：	Value――DER编码的串
输出：	Tag值
说明：  该函数不影响value的值
*/
///////////////////////////////////////////////////////////////////////////
ULONG GetDERTag(
	byteArray& Value
	);

ULONG GetDERTag(
	BYTE* pDERStr,
	ULONG ulLen
	);
//////////////////////////////////////////////////////////////////////////
/*
功能：	按照DER的解码码规则，得出len
输入：	Value――DER编码的串
输出：	len值
说明：  该函数不影响value的值
*/
///////////////////////////////////////////////////////////////////////////
ULONG GetDERLen(
		BYTE* pDERStr,
		ULONG ulDERLen,
		ULONG &ulTagFiledLen,
		ULONG &ulLenFiledLen
		);

//////////////////////////////////////////////////////////////////////////
/*
功能：	按照DER的解码码规则，得出整个DER串的长度
输入：	Value――DER编码的串
		ulDERLen----串的长度，可能大于输出的长度，因为输入的串中可能包含其他
		的DER编码串
输出：	DER串的长度
说明：  该函数不影响value的值
*/
///////////////////////////////////////////////////////////////////////////
ULONG GetDERTotalStrLen(
		BYTE* pDERStr,
		ULONG ulDERLen
		);
//////////////////////////////////////////////////////////////////////////
/*
功能：	按照DER的解码规则，判断tlv格式的正确性
输入：	ulTag――DER编码的串
输出：	len值
说明：  该函数不影响value的值
*/
///////////////////////////////////////////////////////////////////////////
BOOL IsTLVStr(
	ULONG ulTag,
	BYTE* pDERStr,
	ULONG ulDERLen
	);
//////////////////////////////////////////////////////////////////////////
/*
功能：	按照DER的解码码规则，解析TLV结构
输入：	Value――DER编码的串
输出：	ulTag――Tag值
		ulLen――Len值
		Value――vlue值
*/
///////////////////////////////////////////////////////////////////////////
void TLVDecoding(
	ULONG& ulTag,
	ULONG& ulLen,
	byteArray& Value
	);
//////////////////////////////////////////////////////////////////////////
/*
功能：	将一个字符串的值拷贝到动态的byte数组中
输入：	pbStr――源字符串头指针
		ulLen――源字符串长度
		byArray――目标动态数组
输出：	byArray――目标动态数组
说明：  该函数将清除byArray中原有的数据，替换成新的源字符串的数据
*/
///////////////////////////////////////////////////////////////////////////
void CopyToByteArray(
	BYTE* pbStr,
	ULONG ulLen,
	byteArray& byArray
	);
//////////////////////////////////////////////////////////////////////////
/*
功能：	将一个字符串的从源动态数组转移到目标动态数组中
输入：	bySrArray――源动态数组
		ulLen――需要转移的长度
输出：	byArray――目标动态数组
说明：  该函数将清除byDeArray中原有的数据，替换成新的转移过来的数据
		bySrArray中相应的ulLen长度的数据会被去掉
*/
///////////////////////////////////////////////////////////////////////////
void MoveToByteArray(
	byteArray& bySrArray,
	ULONG ulLen,
	byteArray& byDeArray
	);
/////////////////////////////////////////////////////////////////////////
/*
功能：	对asn.1中规定的整数类型进行编码
输入：	ulInt――整数
		byArray――目标动态数组，用于存放编码的值
输出：	byArray――目标动态数组，用于存放编码的值
说明：  该函数将清除byArray中原有的数据，替换成新的编码的值
		该函数仅对无符号数进行编码
*/
///////////////////////////////////////////////////////////////////////////
void ULONGEncoding(
	ULONG ulInt,
	byteArray &byArray
	);
/////////////////////////////////////////////////////////////////////////
/*
功能：	对asn.1中规定的整数类型进行解码
输入：	byArray――动态数组，用于存放编码的值
输出：	ulInt――存放解出的整数的值
说明：  该函数将影响byArray中原有的数据
		该函数仅对无符号数进行解码
*/
///////////////////////////////////////////////////////////////////////////
void ULONGDecoding(
	byteArray &byArray,
	ULONG &ulInt
	);
//////////////////////////////////////////////////////////////////////////
/*
功能：	对asn.1中规定的GeneralizedTime类型进行编码
输入：	pDate――日期
		byArray――目标动态数组，用于存放编码的值
输出：	byArray――目标动态数组，用于存放编码的值
说明：  该函数将影响byArray中原有的数据，替换成新的编码的值
*/
///////////////////////////////////////////////////////////////////////////
void GeneralizedTimeEncoding(
	DATE* pDate,
	byteArray& byArray
	);

//////////////////////////////////////////////////////////////////////////
/*
功能：	对asn.1中规定的GeneralizedTime类型进行解码
输入：byArray――源动态数组，用于存放编码的值
输出：	pDate――日期
说明：  该函数将影响byArray中原有的数据，
*/
///////////////////////////////////////////////////////////////////////////
void GeneralizedTimeDecoding(
	byteArray& byArray,
	DATE* pDate
	);

#endif